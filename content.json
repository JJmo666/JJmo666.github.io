[{"title":"切片","date":"2018-07-19T10:27:31.000Z","path":"2018/07/19/切片/","text":"切片(Slice)​ [开始索引：结束索引：步长] ​ 索引从左到右从0 开始，从右到左（倒数）从-1开始 ​ 从开始索引取到结束索引（不包括结束索引） 1234567&gt;&gt;&gt; a = 'abcdef'&gt;&gt;&gt; a[0:2]'ab'&gt;&gt;&gt; a[0:-1]'abcde'&gt;&gt;&gt; a[0:3:2]'ac' ​ 步长为负 - 时 ​ 原索引不变，但顺序颠倒 ​ 步长为正 逆序索引 -5 -4 -3 -2 -1 a b c d e 正序索引 0 1 2 3 4 ​ 步长为负 逆序索引 -1 -2 -3 -4 -5 e d c b a 正序索引 4 3 2 1 0 ​ 切片时同序索引开始索引大于结束索引 123456789101112&gt;&gt;&gt; a[4:0:-1]'edcb'&gt;&gt;&gt; a[4::-1]'edcba'&gt;&gt;&gt; a[-1:-3:-1]'ed'&gt;&gt;&gt; a[-1:0:-1]'edcb'&gt;&gt;&gt; a[-1:-5:-2]'ec'&gt;&gt;&gt; a[-1:0:-2]'ec'","tags":[{"name":"python3","slug":"python3","permalink":"http://jjmo666.gitee.io/tags/python3/"}]},{"title":"字符串列表元组字典集合","date":"2018-07-12T14:14:34.000Z","path":"2018/07/12/字符串列表字典集合/","text":"字符串（str）123456789101112131415161718#字符串创建s = 'abc's1 = \"abc\"s2 = '''abc'''s3 = \"\"\"abc\"\"\"#创建空字符串s = \"\"# '' \"\" 混合使用用于嵌套s = \"请说：'你好'\"&gt;&gt;&gt;s请说：'你好'# 工厂方法&gt;&gt;&gt; str(1)'1'&gt;&gt;&gt; str('aaaa')'aaaa'&gt;&gt;&gt; str([1,2,3])'[1, 2, 3]' *字符串一旦创建内容不可修改 列表（list）123456789101112131415161718192021222324252627282930313233343536373839404142434445# 创建列表,支持索引和切片,一个列表里可以存储任意的数据类型l = [1,'a',2]# 创建空列表l = []# 列表可变，通过索引访问修改，&gt;&gt;&gt; l = [1,'a',2]&gt;&gt;&gt; l[1, 'a', 2]&gt;&gt;&gt; l[1] = 3&gt;&gt;&gt; l[1, 3, 2]#可以通过切片赋值，&gt;&gt;&gt; l = [1,2,3,4,5,6]&gt;&gt;&gt; l[1, 2, 3, 4, 5, 6]# 赋值只能是可迭代对象&gt;&gt;&gt; l[0:2] = 1Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: can only assign an iterable&gt;&gt;&gt; l[0:2] = [7,8]&gt;&gt;&gt; l[7, 8, 3, 4, 5, 6]&gt;&gt;&gt; l[0:2] = [7]# 如果有步长，看分成几个不连续的块 ，就要对应赋几个值&gt;&gt;&gt; l[7, 3, 4, 5, 6]&gt;&gt;&gt; l[0::2][7, 4, 6]&gt;&gt;&gt; l[0::2] = ['a','b','c']&gt;&gt;&gt; l['a', 3, 'b', 5, 'c']# 工厂方法 ，将iterable类型 转成list&gt;&gt;&gt; list('a')['a']&gt;&gt;&gt; list('abc')['a', 'b', 'c']&gt;&gt;&gt; list(123)Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'int' object is not iterable&gt;&gt;&gt; list((1,2,3))[1, 2, 3] 元组（tuple）123456789101112131415#元组创建，元组一旦创建 内容不可变tup = (1,2,3)#创建空元组t = ()# 单个元素的元组，要加逗号t = ('a', )# 工厂方法，将iterable类型 转成tuple&gt;&gt;&gt; tuple(1)Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'int' object is not iterable&gt;&gt;&gt; tuple([1,2])(1, 2)&gt;&gt;&gt; tuple('av')('a', 'v') 字典（dict）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106# 创建字典 = &#123;key:value&#125; key必须是不可变类型（绝对不包含可变的），value 任意类型,key唯一不重复，value可以重复d = &#123;'a':'a', 'b': 2&#125;# key必须是不可变类型（绝对不包含可变的）&gt;&gt;&gt; d = &#123;(1,[2,3]):123&#125;Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: unhashable type: 'list'&gt;&gt;&gt; d = &#123;(1,(2,3)):123&#125;&gt;&gt;&gt; d&#123;(1, (2, 3)): 123&#125;# 空字典d = &#123;&#125;d = dict()#工厂方法&gt;&gt;&gt; dict(a='a', b='b') # 关键字&#123;'a': 'a', 'b': 'b'&#125;&gt;&gt;&gt; dict(zip(['one', 'two', 'three'], [1, 2, 3])) # 映射函数方式来构造字典&#123;'one': 1, 'two': 2, 'three': 3&#125;&gt;&gt;&gt; dict([('one', 1), ('two', 2), ('three', 3)]) # 可迭代对象方式来构造字典&#123;'one': 1, 'two': 2, 'three': 3&#125;&gt;&gt;&gt;dict([[1,2],[3,4]])&#123;1: 2, 3: 4&#125;# 访问字典 dict([('one', 1), ('two', 2), ('three', 3)])#通过key&gt;&gt;&gt; d = &#123;'one': 1, 'two': 2, 'three': 3&#125;&gt;&gt;&gt; d['one']1&gt;&gt;&gt; d['three']3# for var in mydict: 遍历的是key&gt;&gt;&gt; d&#123;'one': 1, 'two': 2, 'three': 3&#125;&gt;&gt;&gt; for var in d:... print(var)...onetwothree# dict.keys() 获取字典中所有的key值&gt;&gt;&gt; d.keys()dict_keys(['one', 'two', 'three'])# dict.values() 获取字典中所有的value值&gt;&gt;&gt; d.values()dict_values([1, 2, 3])#以上两个函数返回的都是一个特殊的数据类型，记得用list或者tuple函数转换# 提前判断key值是否存在于字典中： #key in mydict 判断key是否在mydict字典中 &gt;&gt;&gt; 'one' in d True &gt;&gt;&gt; 'a' in d False #key not in mydict 判断key是否不在mydict中 &gt;&gt;&gt; 'one' not in d False &gt;&gt;&gt; 'a' not in d True # 更新字典 dict[key] = value ,字典中有key，更新value ，没有就加入 key：value&gt;&gt;&gt; d = &#123;'a':1,'b':2&#125;&gt;&gt;&gt; d&#123;'a': 1, 'b': 2&#125;&gt;&gt;&gt; d['a'] = 5&gt;&gt;&gt; d&#123;'a': 5, 'b': 2&#125;&gt;&gt;&gt; d['c']= 3&gt;&gt;&gt; d&#123;'a': 5, 'b': 2, 'c': 3&#125;#删除字典元素# del dict['key']; # 删除键是'key'对应条目&gt;&gt;&gt; d = &#123;'a':1,'b':2&#125;&gt;&gt;&gt; d&#123;'a': 1, 'b': 2&#125;&gt;&gt;&gt; del d['a']&gt;&gt;&gt; d&#123;'b': 2&#125;# dict.clear(); # 清空词典所有条目&gt;&gt;&gt; d.clear()&gt;&gt;&gt; d&#123;&#125;# del dict ; #删除字典&gt;&gt;&gt; del d&gt;&gt;&gt; dTraceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;NameError: name 'd' is not defined# dict.pop(key) #在删除key值的过程中，还会把对应的value返回回来&gt;&gt;&gt; d.pop('a')1 集合（set）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283# 创建集合s = &#123;1,2,3&#125;# 创建一个空集合s = set()'''集合特性： 集合中的所有数据元素都要经过hash处理 集合无序 集合中的数据是不重复的 集合中不能存储可变数据对象'''&gt;&gt;&gt; a = &#123;[1,2]&#125;Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: unhashable type: 'list'&gt;&gt;&gt;# 不可变集合frozenset： # f_set = frozenset( seq ) 接收一个序列作为参数''' 可变集合 -&gt; 更新集合： set.add(不可变数据类型) 在接收一个不可变序列进来时，这个序列会保持原样加进来'''&gt;&gt;&gt; s = &#123;1,2,3&#125;&gt;&gt;&gt; s.add(4)&gt;&gt;&gt; s&#123;1, 2, 3, 4&#125;&gt;&gt;&gt; s.add((1,2))&gt;&gt;&gt; s&#123;(1, 2), 1, 2, 3, 4&#125;&gt;&gt;&gt; s.add([1,2])Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: unhashable type: 'list'&gt;&gt;&gt; s.add('abc')&gt;&gt;&gt; s&#123;(1, 2), 1, 2, 3, 4, 'abc'&#125;''' set.update( 数据集(str,list,tuple,dict,set) ) 更新 数据集拆分成单个的元素，去掉其中重复的，然后添加到集合中 数据集中不允许含有可变数据对象 数据集：str,list,tuple,dict(key值会作为集合中的数据),set,frozenset'''&gt;&gt;&gt; s = &#123;1,2,3&#125;&gt;&gt;&gt; s.update('abc')&gt;&gt;&gt; s&#123;1, 2, 3, 'a', 'c', 'b'&#125;&gt;&gt;&gt; s.update(['b','d'])&gt;&gt;&gt; s&#123;1, 2, 3, 'a', 'c', 'd', 'b'&#125;&gt;&gt;&gt; s.update([[2]])Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: unhashable type: 'list''''可变集合 -&gt; 删除集合： set.remove( 集合中的数据元素 ) 悄无声息的删除 set.pop（） 不接受参数 随机的删除并返回一个集合中被删除的元素 **弹出一个集合中的数据** del myset 直接删除这个变量'''&gt;&gt;&gt; s&#123;1, 2, 3, 'a', 'c', 'd', 'b'&#125;&gt;&gt;&gt; s.remove('a')&gt;&gt;&gt; s&#123;1, 2, 3, 'c', 'd', 'b'&#125;&gt;&gt;&gt; s.pop()1&gt;&gt;&gt; s&#123;2, 3, 'c', 'd', 'b'&#125;&gt;&gt;&gt; del s&gt;&gt;&gt; sTraceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;NameError: name 's' is not defined'''可变集合|不可变集合 -&gt; 访问集合： for var in myset： 集合通过for循环迭代访问是唯一一种办法可变集合|不可变集合 -&gt; 判断集合中是否存在某元素： var in myset 判断var是否在集合中 var not in myset 判断var是否不在集合中 '''","tags":[{"name":"python3","slug":"python3","permalink":"http://jjmo666.gitee.io/tags/python3/"}]},{"title":"centos安装python3","date":"2018-06-29T08:37:05.000Z","path":"2018/06/29/centos安装python3/","text":"1.解压源码包，移动到/usr/local/1sudo mv python文件夹 /usr/local 2.安装依赖包1sudo yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel 3.进入文件夹1./configure 报错：configure: error: no acceptable C compiler found in $PATH 12因为是centos linux，默认可以采用yum方式安装，则采用如下命令安装gcc编译器即可：sudo yum -y install gcc 4 安装1sudo make &amp;&amp; make install","tags":[{"name":"cengtos","slug":"cengtos","permalink":"http://jjmo666.gitee.io/tags/cengtos/"},{"name":"python3","slug":"python3","permalink":"http://jjmo666.gitee.io/tags/python3/"}]}]